{"version":3,"file":"static/js/34.00727bb9.chunk.js","mappings":"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","sources":["components/AdditionalStyles/ButtonContacts.styled.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/contacts/selectors.jsx","components/Box.jsx","pages/Contacts.jsx"],"sourcesContent":["import * as React from 'react';\nimport ButtonUnstyled, { buttonUnstyledClasses } from '@mui/base/ButtonUnstyled';\nimport { styled } from '@mui/system';\nimport Stack from '@mui/material/Stack';\n\nconst green = {\n    500: '#4EA4A6',\n    600: '#428B8C',\n    700: '#2B7475',\n};\n\nconst CustomButton = styled(ButtonUnstyled)`\n  font-family: IBM Plex Sans, sans-serif;\n  font-weight: bold;\n  font-size: 0.875rem;\n  background-color: ${green[500]};\n  padding: 12px 24px;\n  border-radius: 12px;\n  color: white;\n  transition: all 150ms ease;\n  cursor: pointer;\n  border: none;\n\n  &:hover {\n    background-color: ${green[600]};\n  }\n\n  &.${buttonUnstyledClasses.active} {\n    background-color: ${green[700]};\n  }\n\n  &.${buttonUnstyledClasses.focusVisible} {\n    box-shadow: 0 4px 20px 0 rgba(61, 71, 82, 0.1), 0 0 0 5px rgba(0, 127, 255, 0.5);\n    outline: none;\n  }\n\n  &.${buttonUnstyledClasses.disabled} {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport function ButtonContacts(props) {\n    return (\n        <Stack spacing={2} direction=\"row\">\n            <CustomButton {...props}>{props.children}</CustomButton>\n        </Stack> \n  );\n}","import styled from \"styled-components\";\nimport { theme } from \"theme\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    gap: ${p => theme.space[3]}px;\n    margin-bottom: ${p => theme.space[2]}px;\n`","import { ButtonContacts } from 'components/AdditionalStyles/ButtonContacts.styled';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from \"./Contact.styled\";\n\nexport const Contact = ({contact, onDelete}) => {\n    const { id, name, number } = contact;\n    return (\n        <Wrapper>\n            <snap>{name}: {number}</snap>\n            <ButtonContacts type='button' onClick={() => onDelete(id)}>\n                Delete\n            </ButtonContacts>\n        </Wrapper>\n    )\n}\n\nContact.propType = {\n    contact: PropTypes.object.isRequired,\n}","import PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport { removeContact } from \"redux/contacts/operations\";\nimport { Contact } from \"../Contact/Contact\";\n\nexport const ContactList = ({filtered}) => {\n    const dispatch = useDispatch();\n\n    function handleDelete (id) {\n        dispatch(removeContact(id));\n    };\n\n    return (\n        <ul>\n            {filtered.map(({ id, name, number }) => {\n                return (\n                    <li key = {id}>\n                        <Contact contact={{id, name, number}} onDelete={handleDelete}/>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nContactList.proptype = {\n    filtered: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.isRequired\n        })\n    )\n}","import styled from \"styled-components\";\nimport { theme } from 'theme';\n\nexport const FilterInput = styled.input`\ndisplay: block;\n    width: 320px;\n    font-family: IBM Plex Sans, sans-serif;\n    font-size: 0.875rem;\n    font-weight: 400;\n    line-height: 1.5;\n    padding: 12px;\n    border-radius: 12px;\n    color: #1A2027;\n    background: #fff;\n    border: 1px solid #E0E3E7;\n    box-shadow: 0px 2px 2px #F3F6F9;\n\n    &:hover {\n    border-color: #56B6B8;\n  }\n\n  &:focus {\n    border-color: #56B6B8;\n    outline: 3px solid #99CCF3;\n  }\n`\n\nexport const Label = styled.label`\n    display: block;\n    padding: ${p => theme.space[3]}px 0;\n`","import { FilterInput, Label } from \"./Filter.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFilter } from \"redux/contacts/slice\";\n\nexport function Filter() {\n    const dispatch = useDispatch();\n    const filter = useSelector(state => state.phonebook.filter);\n\n    function handleChange (e) {\n        dispatch(addFilter(e.target.value));\n    }\n  \n    return (\n        <Label>\n            Find contact by name:\n            <FilterInput type=\"text\" value={filter} onChange={handleChange} />\n        </Label>\n    )\n}\n","import styled from \"styled-components\";\nimport { Form, Field } from 'formik';\nimport { theme } from 'theme';\n\nexport const WrapperForm = styled(Form)`\n    display: table-caption;\n`\n\nexport const InputForm = styled(Field)`\n    width: 320px;\n    font-family: IBM Plex Sans, sans-serif;\n    font-size: 0.875rem;\n    font-weight: 400;\n    line-height: 1.5;\n    padding: 12px;\n    border-radius: 12px;\n    color: #1A2027;\n    background: #fff;\n    border: 1px solid #E0E3E7;\n    box-shadow: 0px 2px 2px #F3F6F9;\n\n    &:hover {\n    border-color: #56B6B8;\n  }\n\n  &:focus {\n    border-color: #56B6B8;\n    outline: 3px solid #99CCF3;\n  }\n`\n\nexport const Label = styled.label`\n    display: block;\n    padding: ${p => theme.space[3]}px 0;\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from 'formik';\nimport { WrapperForm, InputForm, Label } from './ContactForm.styled'\nimport { addContact } from \"redux/contacts/operations\";\nimport {ButtonContacts} from '../AdditionalStyles/ButtonContacts.styled'\n\nexport function ContactForm () {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.phonebook.contacts);\n\n\n  const handleSubmit = (values, {resetForm}) => {\n    const contactName = contacts.items.find(\n      item => item.name === values.name.trim()\n    )\n    if (!contactName){\n      dispatch(addContact(values));\n    } else {\n      return alert(`${contactName.name} is already in contacts.`);\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik onSubmit={handleSubmit} initialValues={{ name: '', number: '' }}>\n    <WrapperForm>\n      <Label>\n        Name\n      <InputForm\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        />\n        </Label>\n      <Label>\n        Number\n      <InputForm\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        />\n        </Label>\n      <ButtonContacts type=\"submit\">Add contact</ButtonContacts>\n    </WrapperForm>\n  </Formik>\n  );\n}\n","export const getContacts = state => state.phonebook.contacts;\nexport const getFilter = state => state.phonebook.filter;","import styled from \"styled-components\";\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);","import { useDispatch, useSelector } from \"react-redux\";\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { getContacts, getFilter } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Box } from \"components/Box\";\n\nexport default function App () {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => \n    {dispatch(fetchContacts());\n  }, [dispatch])\n\n\n  function getFilteredContacts () {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    )\n  }\n\n  return (\n    <Box as='div' p={3}>\n      <Box as='div' p={3}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </Box>\n      <Box as='div' p={3}>\n        <h2>Contacts</h2>\n        {contacts.items.length === 0 && \n          <p>Contacts are empty</p>\n        }\n        {contacts.items.length > 0 && \n          <>\n            <Filter />\n            <ContactList \n              filtered={getFilteredContacts()} \n            />\n          </>\n        }\n      </Box>\n    </Box>\n  )\n};"],"names":["green","CustomButton","styled","ButtonUnstyled","buttonUnstyledClasses","ButtonContacts","props","Stack","spacing","direction","children","Wrapper","p","theme","Contact","contact","onDelete","id","name","number","type","onClick","propType","PropTypes","ContactList","filtered","dispatch","useDispatch","handleDelete","removeContact","map","proptype","FilterInput","Label","Filter","filter","useSelector","state","phonebook","value","onChange","e","addFilter","target","WrapperForm","Form","InputForm","Field","ContactForm","contacts","onSubmit","values","resetForm","contactName","items","find","item","trim","alert","addContact","initialValues","pattern","title","required","getContacts","getFilter","Box","color","space","layout","flexbox","grid","background","border","position","App","useEffect","fetchContacts","as","length","normalizedFilter","toLowerCase","includes","getFilteredContacts"],"sourceRoot":""}