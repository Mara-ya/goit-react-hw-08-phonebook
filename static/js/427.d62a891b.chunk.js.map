{"version":3,"file":"static/js/427.d62a891b.chunk.js","mappings":"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","sources":["components/AdditionalStyles/ButtonLogIn.styled.jsx","components/AdditionalStyles/InputLogIn.styled.jsx","components/AdditionalStyles/PasswordInput.styled.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonUnstyled, { buttonUnstyledClasses } from '@mui/base/ButtonUnstyled';\nimport { styled } from '@mui/system';\n\nconst ButtonRoot = React.forwardRef(function ButtonRoot(props, ref) {\n  const { children, ...other } = props;\n\n  return (\n    <svg width=\"150\" height=\"50\" {...other} ref={ref}>\n      <polygon points=\"0,50 0,0 150,0 150,50\" className=\"bg\" />\n      <polygon points=\"0,50 0,0 150,0 150,50\" className=\"borderEffect\" />\n      <foreignObject x=\"0\" y=\"0\" width=\"150\" height=\"50\">\n        <div className=\"content\">{children}</div>\n      </foreignObject>\n    </svg>\n  );\n});\n\nButtonRoot.propTypes = {\n  children: PropTypes.node,\n};\n\nconst green = {\n  50: '#F0F7FF',\n  100: '#C2E0FF',\n  200: '#99CCF3',\n  400: '#56B6B8',\n  500: '#4EA4A6',\n  600: '#428B8C',\n  800: '#2B7475',\n  900: '#276769',\n};\n\nconst CustomButtonRoot = styled(ButtonRoot)(\n  ({ theme }) => `\n  overflow: visible;\n  cursor: pointer;\n  --main-color: ${theme.palette.mode === 'light' ? green[600] : green[100]};\n  --hover-color: ${theme.palette.mode === 'light' ? green[50] : green[900]};\n  --active-color: ${theme.palette.mode === 'light' ? green[100] : green[800]};\n\n  & polygon {\n    fill: transparent;\n    transition: all 800ms ease;\n    pointer-events: none;\n  }\n  \n  & .bg {\n    stroke: var(--main-color);\n    stroke-width: 1;\n    filter: drop-shadow(0 4px 20px rgba(0, 0, 0, 0.1));\n    fill: transparent;\n  }\n\n  & .borderEffect {\n    stroke: var(--main-color);\n    stroke-width: 2;\n    stroke-dasharray: 150 600;\n    stroke-dashoffset: 150;\n    fill: transparent;\n  }\n\n  &:hover,\n  &.${buttonUnstyledClasses.focusVisible} {\n    .borderEffect {\n      stroke-dashoffset: -600;\n    }\n\n    .bg {\n      fill: var(--hover-color);\n    }\n  }\n\n  &:focus,\n  &.${buttonUnstyledClasses.focusVisible} {\n    outline: 2px solid ${theme.palette.mode === 'dark' ? green[400] : green[200]};\n    outline-offset: 2px;\n  }\n\n  &.${buttonUnstyledClasses.active} { \n    & .bg {\n      fill: var(--active-color);\n      transition: fill 300ms ease-out;\n    }\n  }\n\n  & foreignObject {\n    pointer-events: none;\n\n    & .content {\n      font-size: 0.875rem;\n      font-family: IBM Plex Sans, sans-serif;\n      font-weight: 500;\n      line-height: 1.5;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: var(--main-color);\n      text-transform: uppercase;\n    }\n\n    & svg {\n      margin: 0 5px;\n    }\n  }`,\n);\n\nconst SvgButton = React.forwardRef(function SvgButton(props, ref) {\n  return <ButtonUnstyled {...props} component={CustomButtonRoot} ref={ref} />;\n});\n\nexport function ButtonSt({children}) {\n  return <SvgButton>{children}</SvgButton>;\n}","import * as React from 'react';\nimport { useInput } from '@mui/base';\nimport { styled } from '@mui/system';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\n\nconst green = {\n  100: '#C2E0FF',\n  200: '#99CCF3',\n  400: '#56B6B8',\n  500: '#4EA4A6',\n  600: '#428B8C',\n};\n\nconst grey = {\n  50: '#F3F6F9',\n  100: '#E7EBF0',\n  200: '#E0E3E7',\n  300: '#CDD2D7',\n  400: '#B2BAC2',\n  500: '#A0AAB4',\n  600: '#6F7E8C',\n  700: '#3E5060',\n  800: '#2D3843',\n  900: '#1A2027',\n};\n\nconst StyledInputElement = styled('input')(\n  ({ theme }) => `\n  width: 320px;\n  font-family: IBM Plex Sans, sans-serif;\n  font-size: 0.875rem;\n  font-weight: 400;\n  line-height: 1.5;\n  padding: 12px;\n  border-radius: 12px;\n  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};\n  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};\n  border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};\n  box-shadow: 0px 2px 2px ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};\n\n  &:hover {\n    border-color: ${green[400]};\n  }\n\n  &:focus {\n    border-color: ${green[400]};\n    outline: 3px solid ${theme.palette.mode === 'dark' ? green[500] : green[200]};\n  }\n`,\n);\n\nconst CustomInput = React.forwardRef(function CustomInput(props, ref) {\n  const { getRootProps, getInputProps } = useInput(props);\n\n  const inputProps = getInputProps();\n\n  // Make sure that both the forwarded ref and the ref returned from the getInputProps are applied on the input element\n  inputProps.ref = useForkRef(inputProps.ref, ref);\n\n  return (\n    <div {...getRootProps()}>\n      <StyledInputElement {...props} {...inputProps} />\n    </div>\n  );\n});\n\nexport function Input(props) {\n  return <CustomInput {...props} placeholder=\"Type somethingâ€¦\" />;\n}\n\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport ButtonUnstyled from '@mui/base/ButtonUnstyled';\nimport InputUnstyled, { inputUnstyledClasses } from '@mui/base/InputUnstyled';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport { styled } from '@mui/system';\n\nconst green = {\n  100: '#C2E0FF',\n  200: '#99CCF3',\n  400: '#56B6B8',\n  500: '#4EA4A6',\n  600: '#428B8C',\n};\n\nconst grey = {\n  50: '#F3F6F9',\n  100: '#E7EBF0',\n  200: '#E0E3E7',\n  300: '#CDD2D7',\n  400: '#B2BAC2',\n  500: '#A0AAB4',\n  600: '#6F7E8C',\n  700: '#3E5060',\n  800: '#2D3843',\n  900: '#1A2027',\n};\n\nconst StyledInputRoot = styled('div')(\n  ({ theme }) => `\n  width: 320px;\n  font-family: IBM Plex Sans, sans-serif;\n  font-weight: 400;\n  border-radius: 12px;\n  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[500]};\n  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};\n  border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};\n  box-shadow: 0px 2px 2px ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n  &.${inputUnstyledClasses.focused} {\n    border-color: ${green[400]};\n    outline: 3px solid ${theme.palette.mode === 'dark' ? green[500] : green[200]};\n  }\n\n  &:hover {\n    border-color: ${green[400]};\n  }\n`,\n);\n\nconst StyledInputElement = styled('input')(\n  ({ theme }) => `\n  font-size: 0.875rem;\n  font-family: inherit;\n  font-weight: 400;\n  line-height: 1.5;\n  flex-grow: 1;\n  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};\n  background: inherit;\n  border: none;\n  border-radius: inherit;\n  padding: 12px 12px;\n  outline: 0;\n`,\n);\n\nconst IconButton = styled(ButtonUnstyled)(\n  ({ theme }) => `\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  background: inherit;\n  cursor: pointer;\n  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[700]};\n  `,\n);\n\nconst InputAdornment = styled('div')`\n  margin: 8px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CustomInput = React.forwardRef(function CustomInput(props, ref) {\n  const { slots, ...other } = props;\n  return (\n    <InputUnstyled\n      slots={{\n        root: StyledInputRoot,\n        input: StyledInputElement,\n        ...slots,\n      }}\n      {...other}\n      ref={ref}\n    />\n  );\n});\n\nCustomInput.propTypes = {\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    textarea: PropTypes.elementType,\n  }),\n};\n\nexport function PasswordInput({name}) {\n  const [values, setValues] = React.useState({\n    amount: '',\n    password: '',\n    weight: '',\n    weightRange: '',\n    showPassword: false,\n  });\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n  \n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <Box sx={{ display: 'flex', '& > * + *': { ml: 1 } }}>\n      <CustomInput\n        id=\"outlined-adornment-password\"\n        type={values.showPassword ? 'text' : 'password'}\n        value={values.password}\n        placeholder=\"Type somethingâ€¦\"\n        onChange={handleChange('password')}\n        name={name}\n        endAdornment={\n          <InputAdornment>\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              onMouseDown={handleMouseDownPassword}\n            >\n              {values.showPassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </Box>\n  );\n}","import styled from \"styled-components\";\nimport { theme } from 'theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: ${p => theme.space[4]}px;\n`\n\nexport const Label = styled.label`\n    display: block;\n    padding: ${p => theme.space[3]}px 0;\n`\n\nexport const Button = styled.button`\n  border: medium none;\n  background-image: none; \n  background: transparent;\n  float: left;\n  background-color: transparent;\n`","import { ButtonSt } from 'components/AdditionalStyles/ButtonLogIn.styled';\nimport { PasswordInput } from 'components/AdditionalStyles/PasswordInput.styled';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {Input} from '../AdditionalStyles/InputLogIn.styled';\nimport { Button, Label, Wrapper } from './RegisterForm.styled';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Wrapper>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <Label>\n          Username\n          <Input type=\"text\" name=\"name\" />\n        </Label>\n        <Label>\n          Email\n          <Input type=\"email\" name=\"email\" />\n        </Label>\n        <Label>\n          Password\n          <PasswordInput type=\"password\" name=\"password\" />\n        </Label>\n        <Button>\n        <ButtonSt type=\"submit\">Register</ButtonSt>\n        </Button>\n      </form>\n    </Wrapper>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["ButtonRoot","React","props","ref","children","other","width","height","points","className","x","y","green","CustomButtonRoot","styled","theme","palette","mode","buttonUnstyledClasses","SvgButton","component","ButtonSt","grey","StyledInputElement","CustomInput","useInput","getRootProps","inputProps","getInputProps","useForkRef","Input","placeholder","StyledInputRoot","inputUnstyledClasses","IconButton","ButtonUnstyled","InputAdornment","slots","root","input","PasswordInput","prop","name","amount","password","weight","weightRange","showPassword","values","setValues","sx","display","ml","id","type","value","onChange","event","target","endAdornment","onClick","onMouseDown","preventDefault","Wrapper","p","Label","Button","RegisterForm","dispatch","useDispatch","onSubmit","e","form","currentTarget","register","elements","email","reset","autoComplete","I","Register","Helmet"],"sourceRoot":""}